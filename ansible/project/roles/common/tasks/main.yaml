---
- name: Installing required packages for k8s
  ansible.builtin.apt:
    name:
      - containerd
      - docker.io
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: true

- name: Ensure /etc/apt/keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Handle Docker Socket Permissions
  ansible.builtin.file:
    path: /run/docker.sock
    mode: '0666'

- name: Handle containerd Socket Permissions
  ansible.builtin.file:
    path: /run/containerd/containerd.sock
    mode: '0666'

- name: Generate default containerd config and save to /etc/containerd/config.toml
  ansible.builtin.command: containerd config default
  register: containerd_config
  changed_when: false

- name: Create containerd config /etc/containerd
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    owner: "{{ username_var }}"
    group: "{{ groupname_var }}"
    mode: '0755'

- name: Write containerd config to /etc/containerd/config.toml
  ansible.builtin.copy:
    content: "{{ containerd_config.stdout }}"
    dest: /etc/containerd/config.toml
    owner: "{{ username_var }}"
    group: "{{ groupname_var }}"
    mode: '0644'

- name: Update SystemdCgroup setting in /etc/containerd/config.toml
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Starting services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - docker
    - containerd

- name: Install GPG key for Kubernetes
  ansible.builtin.shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg  # Ensures this runs only if the key is missing

- name: Add Kubernetes APT repository
  ansible.builtin.apt_repository:
    repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /'
    state: present

- name: Installing k8s components packages
  ansible.builtin.apt:
    name:
      - kubeadm=1.28.1-1.1
      - kubelet=1.28.1-1.1
      - kubectl=1.28.1-1.1
    state: present
    force: true
    update_cache: true

- name: Hold Kubernetes packages
  ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl
  become: true


- name: Starting services
  ansible.builtin.service:
    name: kubelet
    state: started
    enabled: true

- name: Disable swap temporarily
  ansible.builtin.command: swapoff -a

- name: Remove swap entry from /etc/fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(.*\sswap\s.*)$'
    replace: '# \1'
  backup: true

- name: Verify swap is disabled
  ansible.builtin.command: free -h
  register: swap_status

- name: Display swap status
  ansible.builtin.debug:
    msg: "Swap status: {{ swap_status.stdout }}"

- name: Check if br_netfilter is loaded
  ansible.builtin.shell: lsmod | grep br_netfilter
  register: br_netfilter_check
  ignore_errors: true

- name: Load br_netfilter module if not loaded
  community.general.modprobe:
    name: br_netfilter
  when: br_netfilter_check.rc != 0

- name: Ensure sysctl config for Kubernetes networking exists
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/k8s.conf
    state: present
    create: true
    line: "{{ item }}"
  loop:
    - 'net.bridge.bridge-nf-call-ip6tables = 1'
    - 'net.bridge.bridge-nf-call-iptables = 1'

- name: Apply sysctl changes
  ansible.builtin.command: sysctl --system
  register: sysctl_output
  changed_when: "'Reloading' in sysctl_output.stdout"